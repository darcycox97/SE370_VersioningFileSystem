#!/usr/bin/env python

# USAGE: mkcurrent <filename> <version_number>
# Makes version_number the current version of filename.
# filename is assumed to exist in the mount directory
# e.g mkcurrent test.txt 3:
# version 3 becomes version 1, and all versions below 3 are shifted

# Author: Darcy Cox, dcox740

import glob
import os
import sys
import shutil

# returns the path to a specific version of filename
def path_to_version(filename, version):
    return os.path.join('.versiondir', '.versions', '.' + filename + '.' + version)

if __name__ == '__main__':
    # extract filename and version number from arguments
    filename = sys.argv[1]
    version = sys.argv[2]

    # make sure version is in valid range
    if int(version) < 1 or int(version) > 6:
        print 'version number must be between 1 and 6 inclusive'
        sys.exit(1)

    # find the version number specified and throw error if it does not exist
    to_make_current = path_to_version(filename, version)
    if len(glob.glob(to_make_current)) == 0:
        print 'version ' + version + ' not found for file ' + filename
        sys.exit(1)

    # create tmp file so we don't overwrite files we want to keep
    tmp = to_make_current + '.tmp'
    shutil.copy(to_make_current, tmp)

    # increment the more recent versions so we can make the 
    # specified version current without losing data
    for i in range(int(version) - 1, 0, -1):
        shutil.copy(path_to_version(filename, str(i)), path_to_version(filename, str(i + 1)))

    # now there is a free slot at version 1 so we can make the specified version current
    shutil.copy(tmp, path_to_version(filename, str(1)))

    # copy the new current version into the user's view of the file
    file_path = os.path.join('.versiondir', filename)
    shutil.copy(tmp, file_path)
    os.remove(tmp)

    sys.exit(0)

